import pandas as pd
from collections import deque

class Ingredient:
    def __init__(self, name, quantity, unit_price, reorder_threshold):
        self.name = name
        self.quantity = quantity
        self.unit_price = unit_price
        self.reorder_threshold = reorder_threshold

    def update_quantity(self, amount):
        """Update ingredient quantity after an order is processed."""
        self.quantity += amount

    def is_low(self):
        """Check if the stock is below the reorder threshold."""
        return self.quantity < self.reorder_threshold

    def __str__(self):
        return f"{self.name}: {self.quantity} units, Reorder Threshold: {self.reorder_threshold}"

class MenuItem:
    def __init__(self, name, ingredients):
        """
        name: Name of the dish.
        ingredients: List of tuples (Ingredient object, quantity required for the dish).
        """
        self.name = name
        self.ingredients = ingredients

    def use_ingredients(self, quantity_sold):
        """Update ingredient quantities based on the dish being ordered."""
        for ingredient, qty in self.ingredients:
            ingredient.update_quantity(-qty * quantity_sold)

    def __str__(self):
        return f"Dish: {self.name}"

class Inventory:
    def __init__(self):
        self.ingredients = {}  # {name: Ingredient}
        self.dishes = []  # List of MenuItem objects

    def add_ingredient(self, ingredient):
        """Add ingredients to inventory."""
        self.ingredients[ingredient.name] = ingredient

    def add_dish(self, dish):
        """Add menu items to the system."""
        self.dishes.append(dish)

    def process_order(self, dish_name, quantity_sold):
        """Process an order, update ingredient quantities."""
        dish = next((d for d in self.dishes if d.name == dish_name), None)
        if dish:
            dish.use_ingredients(quantity_sold)
            print(f"Order for {dish_name} (x{quantity_sold}) has been processed.")
        else:
            print(f"Dish {dish_name} not found.")

    def check_inventory(self):
        """Check ingredients against reorder threshold and alert if low stock."""
        reorder_queue = deque()
        for ingredient in self.ingredients.values():
            if ingredient.is_low():
                reorder_queue.append(ingredient)
        return reorder_queue

    def process_sales_data(self, sales_file):
        """Process sales data from a file and update inventory."""
        sales_data = pd.read_csv(sales_file)  # Read the CSV file into a pandas DataFrame
        for index, row in sales_data.iterrows():
            dish_name = row['Dish']
            quantity_sold = row['Quantity Sold']
            self.process_order(dish_name, quantity_sold)

    def process_dishes_data(self, dishes_file):
        """Process dishes data (dishes and their ingredients) from a file."""
        dishes_data = pd.read_csv(dishes_file)
        for index, row in dishes_data.iterrows():
            dish_name = row['Dish']
            ingredient_name = row['Ingredient']
            quantity_needed = row['Quantity']

            # If the ingredient exists, use it; otherwise, create a new one
            if ingredient_name not in self.ingredients:
                print(f"Ingredient {ingredient_name} not found, adding to inventory...")
                ingredient = Ingredient(ingredient_name, 100, 1.0, 10)  # Default initial values for new ingredients
                self.add_ingredient(ingredient)

            ingredient = self.ingredients[ingredient_name]
            menu_item = next((d for d in self.dishes if d.name == dish_name), None)

            if not menu_item:
                # Create a new menu item if it doesn't exist
                menu_item = MenuItem(dish_name, [])
                self.add_dish(menu_item)

            # Add ingredient to the dish's ingredient list
            menu_item.ingredients.append((ingredient, quantity_needed))